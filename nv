class Veikals:
    _darbinieki: 'list[Darbinieks]'
    _noliktava: 'Noliktava'
    def __init__(self) -> None:
        self._darbinieki = []
    def AprekinatDarbiniekuAlgas(self) -> float:
        algas = 0.0
        for darbinieks in self._darbinieki:
            algas += darbinieks.IzvaditAlgu()
        return algas
    def PirktPārtiku(self, klients: 'Klients', produkti: 'list[Produkts]') -> 'list[Pārtika]':
        pārdevējs = None
        for darbinieks in self._darbinieki:
            if type(darbinieks) == pārdevējs:
                pārdevējs = darbinieks
                break
        if pārdevējs == None:
            print("Nav pieejams pārdevējs!")
        else:
            pārdevējs._aiznemts = True

        izmaksas = 0.0
        for produkts in produkti:
            izmaksas += produkts.AprekinaIzmaksas()
        if (izmaksas > klients._nauda):
            print("Klientam nepietiek naudas!")
            return
        pirkums = []
        for produkts in produkti:
            pārtika = Pārtika(produkts._sastavdalas)
            # Te vajadzētu pārbaudīt arī vai mums ir virtuvē sastāvdaļas, bet lai taupītu laiku - mēs to nedarīsim
            #for sastavdala in recepte._sastavdalas:
                #self._virtuve._sastavdalas[sastavdala]._daudzums -= 1
            pirkums.append(pārtika)
        klients._nauda -= izmaksas

        pārdevējs._aiznemts = False
        return pirkums

class Darbinieks:
    _alga: float = 100.0
    def IzvaditAlgu(self):
        return self._alga
class PrečuKrāmētāji(Darbinieks):
    _alga = 200.0
class Pārdevējs(Darbinieks):
    _aiznemts: bool
    def __init__(self) -> None:
        self._alga = 150.0
        self._aiznemts = False
    def IzvaditAlgu(self):
        return super().IzvaditAlgu()
class Produkts:
    _veids: 'list[str]'
    _cena: 'list[Cena]'
    def __init__(self, veids, cena):
        self._veids = veids
        self._cena = cena
    def AprekinaIzmaksas(self) -> float:
        cena = 0.0
        for veids in self._veids:
            cena += veids.IzvaditIzmaksas()
        return cena
class Pārtika:
    _produkti: 'list[Produkts]'
    def __init__(self, produkti):
        self._produkti = produkti
    def AprekinaIzmaksas(self) -> float:
        cena = 0.0
        for produkts in self._produkti:
            cena += produkts.IzvaditIzmaksas()
        return cena
class Veids:
    _izmaksas: float
    _daudzums: float
    def __init__(self, izmaksas: float, daudzums: float) -> None:
        self._izmaksas = izmaksas
        self._daudzums = daudzums
    def IzvaditIzmaksas(self) -> float:
        return self._izmaksas*self._daudzums
class Noliktava:
    _produkti: 'list[Produkts]'
    def __init__(self) -> None:
        self._produkti = []
class Klients:
    _nauda: float

udens = Sastavdala(0.5, 2)
kartupeli = Sastavdala(0.2, 5)
buljons = Sastavdala(1, 3)

noliktava = Noliktava()
noliktava._produkti.append(udens)
noliktava._produkti.append(kartupeli)
noliktava._produkti.append(buljons)

Janis = Darbinieks()
Reinis = PrečuKrāmētāji()
Anna = Pārdevējs()
veikals = Veikals()
veikals._darbinieki.append(Janis)
veikals._darbinieki.append(Reinis)
veikals._darbinieki.append(Anna)
#print(restorans.AprekinatDarbiniekuAlgas())

veids = [ "1...", "2..." ]
produkts = [udens, kartupeli, buljons]
pārtika = Pārtika(veids, produkts)

client = Klients()
client._nauda = 100.0

# Te varēja būt arī atsevišķa pasūtījuma klase...
rezultats = Veikals.PirktPārtiku(client, [pārtika])
print(f"Nopirka {len(rezultats)}! Klientam palika {client._nauda} naudiņas!")
